const express = require("express");
const session = require("express-session");
const fileUpload = require("express-fileupload");
const cors = require("cors");
const fs = require("fs");
const bodyParser = require("body-parser");
const path = require("path");
const mysql = require("mysql2");  // mysql2 k√ºt√ºphanesini dahil et
const multer = require("multer");
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 0;  // ƒ∞lk olarak 3000'yi dener, ama doluysa ba≈üka portlar da denenebilir  

// Statik dosyalar (CSS ve JS)
app.use(cors());
app.use(bodyParser.json());
app.use(express.urlencoded({ extended: true }));
app.use(fileUpload());
app.use(express.static("public"));
app.use('/img', express.static(path.join(__dirname, 'public/img')));


// EJS'yi ayarla
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));

// MySQL baƒülantƒ± yapƒ±landƒ±rmasƒ±
const db = mysql.createConnection({
  host: 'localhost',  // MySQL sunucusunun adresi
  user: 'root',       // MySQL kullanƒ±cƒ± adƒ±
  password: '',       // MySQL ≈üifresi
  database: 'AdminPanelDB',  // Baƒülanƒ±lacak veritabanƒ± adƒ±
});

// MySQL baƒülantƒ±sƒ±nƒ± ba≈ülatma
db.connect((err) => {
  if (err) {
    console.error('MySQL baƒülantƒ± hatasƒ±:', err);
    return;
  }
  console.log('MySQL sunucusuna baƒülanƒ±ldƒ±');
  
  // Sunucuyu ba≈ülatma
  const server = app.listen(PORT, () => {
    console.log(`Sunucu ${server.address().port} portunda √ßalƒ±≈üƒ±yor`);
  });
});

// üìå Fotoƒüraf y√ºkleme ayarlarƒ± (public/img klas√∂r√ºne kaydedilecek)
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
      cb(null, "public/img/");
  },
  filename: (req, file, cb) => {
      cb(null, Date.now() + path.extname(file.originalname));
  }
});
const upload = multer({ storage: storage });

 //üìå Proje ekleme i≈ülemi
 app.post("/addProject", (req, res) => {
  const filePath = path.join(__dirname, "api", "data.json");
  let projectsData = [];

  // Eƒüer `data.json` varsa i√ßeriƒüi oku
  if (fs.existsSync(filePath)) {
      projectsData = JSON.parse(fs.readFileSync(filePath, "utf8"));
  }

  // üéØ 1. Resimleri UUID ile kaydet
  let uploadedImages = [];
  if (req.files && req.files.projeResmi) {
      // Eƒüer birden fazla resim varsa, dizi olarak i≈ülem yap
      const images = Array.isArray(req.files.projeResmi) ? req.files.projeResmi : [req.files.projeResmi];

      images.forEach(file => {
          const uniqueID = uuidv4();
          const ext = path.extname(file.name); // Dosya uzantƒ±sƒ±
          const newFileName = `${uniqueID}${ext}`;
          const uploadPath = path.join(__dirname, "public", "img", newFileName);

          // Dosyayƒ± kaydet
          file.mv(uploadPath, err => {
              if (err) console.log("Dosya y√ºklenirken hata olu≈ütu:", err);
          });

          uploadedImages.push("/img/" + newFileName);
      });
  }

  // üéØ 2. Yeni proje olu≈ütur
  const newProject = {
      id: projectsData.length + 1,
      projeAdi: req.body.projeAdi,
      projeSayisi: req.body.projeSayisi,
      projeAciklamasi: req.body.projeAciklamasi,
      baslangicTarihi: req.body.baslangicTarihi,
      tamamlanmaOrani: `%${req.body.tamamlanmaOrani}`,
      projeResmi: uploadedImages.join(",") // Resim yollarƒ±nƒ± JSON formatƒ±nda sakla
  };

  // üéØ 3. `data.json` dosyasƒ±na ekle
  projectsData.push(newProject);
  fs.writeFileSync(filePath, JSON.stringify(projectsData, null, 2));

  res.redirect("/projeler"); // üìå Proje ba≈üarƒ±yla eklenince sayfaya y√∂nlendir
});
// app.post("/addProject",upload.array("projeResmi", 10), (req, res) => {
  
//   const filePath = path.join(__dirname, "api", "data.json");
//   let projectsData = [];

//   // Eƒüer `data.json` varsa i√ßeriƒüi oku
//   if (fs.existsSync(filePath)) {
//       projectsData = JSON.parse(fs.readFileSync(filePath, "utf8"));
//   }

//   // Yeni proje olu≈ütur
//   const newProject = {
//       id: projectsData.length + 1,
//       projeAdi: req.body.projeAdi,
//       projeSayisi: req.body.projeSayisi,
//       projeAciklamasi: req.body.projeAciklamasi,
//       baslangicTarihi: req.body.baslangicTarihi,
//       tamamlanmaOrani: `%${req.body.tamamlanmaOrani}`,
//       projeResmi: req.files.map(file => "/img/" + file.filename).join(",")
//   };

//   projectsData.push(newProject);
//   fs.writeFileSync(filePath, JSON.stringify(projectsData, null, 2));

//   res.redirect("/projeler");  // üìå Proje ba≈üarƒ±yla eklenince sayfaya y√∂nlendir
// });



// API Route: JSON dosyasƒ±nƒ± oku ve API olarak sun
app.get("/api/projeler", (req, res) => {
  const filePath = path.join(__dirname, "api", "data.json");

  fs.readFile(filePath, "utf8", (err, data) => {
      if (err) {
          console.error("Dosya okuma hatasƒ±:", err);
          res.status(500).json({ error: "Veri okunamadƒ±" });
          return;
      }
      res.json(JSON.parse(data));
  });
});



app.get('/port', (req, res) => {
  res.json({ port });
});

// √ñrnek veri sorgulama
app.get('/data', (req, res) => {
  db.query('SELECT * FROM kullanici', (err, results) => {
    if (err) {
      console.error(err);
      res.status(500).send('Veri alƒ±nƒ±rken bir hata olu≈ütu');
      return;
    }
    res.json(results);
  });
});

app.get('/ping', (req, res) => {
  res.send('API √ßalƒ±≈üƒ±yor!');
});

// Ana Sayfa
app.get("/", (req, res) => {
    res.render("index");
});
app.get("/index", (req, res) => {
  res.render("index");
});

//Login
app.get("/login", (req, res) => {
  res.render("login"); // "views/login.ejs" dosyasƒ±nƒ± a√ß
});

app.post("/login", (req, res) => {
  const { mail, sifre } = req.body;
  const sql = "SELECT * FROM kullanici WHERE mail = ?";
  
  db.query(sql, [mail], async (err, results) => {
      if (err) throw err;
      
      if (results.length > 0) {
          const kullanici = results[0];

          // ≈ûifreyi kar≈üƒ±la≈ütƒ±r
          const isMatch = await bcrypt.compare(sifre, kullanici.sifre);

          if (isMatch) {
              req.session.kullanici = { id: kullanici.id, rol: kullanici.rol }; // Kullanƒ±cƒ±yƒ± session'a kaydet

              // Kullanƒ±cƒ± rol√ºne g√∂re y√∂nlendir
              if (kullanici.rol === "admin") {
                  res.redirect("/admin");
              } else {
                  res.redirect("/dashboard");
              }
          } else {
              res.send("Yanlƒ±≈ü ≈üifre!");
          }
      } else {
          res.send("Kullanƒ±cƒ± bulunamadƒ±!");
      }
  });
});

//Hesap Olu≈üturma Sayfasƒ±
app.get("/hesapOlustur", (req, res) => {
  res.render("hesapOlustur"); // "views/login.ejs" dosyasƒ±nƒ± a√ß
});

app.post("/hesapOlustur", (req, res) => {
  const { mail, isim, sifre } = req.body;
  
  // Aynƒ± mail veya kullanƒ±cƒ± adƒ± var mƒ± kontrol et
  const sql = "SELECT * FROM kullanici WHERE mail = ? OR isim = ?";
  
  db.query(sql, [mail, isim], (err, results) => {
      if (err) throw err;

      if (results.length > 0) {
          return res.send("Bu e-posta veya kullanƒ±cƒ± adƒ± zaten kullanƒ±lƒ±yor!");
      }

      // Kullanƒ±cƒ±yƒ± veritabanƒ±na kaydet
      const insertSql = "INSERT INTO kullanici (mail, isim, sifre, rol) VALUES (?, ?, ?, 'uye')";
      
      db.query(insertSql, [mail, isim, sifre], (err, result) => {
          if (err) throw err;

          res.redirect("/login"); // Kayƒ±t sonrasƒ± giri≈ü sayfasƒ±na y√∂nlendir
      });
  });
});

//Sifre Unuttum Page 
app.get("/sifreUnuttum", (req, res) => {
  res.render("sifreUnuttum");
});

//Proje Ekle Page 
app.get("/projeEkle", (req, res) => {
  res.render("projeEkle");
});

//Proje G√ñster Page 
// app.get("/projeler", (req, res) => {
//   const filePath = path.join(__dirname, "api", "data.json");
//     let projectsData = [];

//     if (fs.existsSync(filePath)) {
//         projectsData = JSON.parse(fs.readFileSync(filePath, "utf8"));
//     }

//     res.render("projeler", { projects: projectsData });
// });
app.get("/projeler", (req, res) => {
  fs.readFile("./api/data.json", "utf8", (err, data) => {
      if (err) throw err;
      let projeler = JSON.parse(data);
      res.render("projeler", { projeler }); // 'projeler.ejs' ≈üablonuna projeler listesini g√∂nderiyoruz
  });
});


//Proje D√ºzenle Page 
app.get("/projeDuzenle", (req, res) => {
  const id = req.query.id;
  console.log("Gelen ID:", id); // Gelen ID'yi terminalde kontrol et

  fs.readFile("./api/data.json", "utf8", (err, data) => {
      if (err) throw err;
      let projeler = JSON.parse(data);

      console.log("Projeler JSON Verisi:", projeler); // JSON i√ßeriƒüini g√∂r

      let seciliProje = projeler.find(p => p.id == id);
      console.log("Bulunan Proje:", seciliProje); // E≈üle≈üme olup olmadƒ±ƒüƒ±nƒ± g√∂r

      if (!seciliProje) {
          return res.status(404).send("Proje bulunamadƒ±!");
      }

      res.render("projeDuzenle", { proje: seciliProje });
  });
});


// Resim y√ºkleme ayarlarƒ±
app.post("/updateProject", (req, res) => {
  const { id, projeAdi, projeSayisi, projeAciklamasi, baslangicTarihi, tamamlanmaOrani } = req.body;
  const filePath = "./api/data.json";

  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) {
      console.error("Dosya okuma hatasƒ±:", err);
      return res.status(500).send("Sunucu hatasƒ±");
    }

    let projeler = JSON.parse(data);
    let index = projeler.findIndex(p => p.id == id);

    if (index === -1) {
      return res.status(404).send("Proje bulunamadƒ±.");
    }

    // Mevcut resimleri al
    let mevcutResimler = projeler[index].projeResmi ? projeler[index].projeResmi.split(',').map(img => img.trim()) : [];

    // Yeni y√ºklenen resimleri i≈üle
    let yeniResimler = [];
    if (req.files && req.files.projeResmi) {
      const images = Array.isArray(req.files.projeResmi) ? req.files.projeResmi : [req.files.projeResmi];

      let uploadPromises = images.map(file => {
        return new Promise((resolve, reject) => {
          const uniqueID = uuidv4();
          const ext = path.extname(file.name);
          const newFileName = `${uniqueID}${ext}`;
          const uploadPath = path.join(__dirname, "public", "img", newFileName);

          file.mv(uploadPath, err => {
            if (err) {
              console.error("Dosya y√ºklenirken hata olu≈ütu:", err);
              reject(err);
            } else {
              resolve("/img/" + newFileName);
            }
          });
        });
      });

      Promise.all(uploadPromises)
        .then(uploadedImages => {
          let guncellenmisResimler = [...mevcutResimler, ...uploadedImages].join(', ');

          // Proje bilgilerini g√ºncelle
          projeler[index] = {
            ...projeler[index],
            projeAdi,
            projeSayisi,
            projeAciklamasi,
            baslangicTarihi,
            tamamlanmaOrani: tamamlanmaOrani.replace("%", ""),
            projeResmi: guncellenmisResimler
          };

          // JSON dosyasƒ±nƒ± g√ºncelle
          fs.writeFile(filePath, JSON.stringify(projeler, null, 4), (err) => {
            if (err) {
              console.error("Dosya yazma hatasƒ±:", err);
              return res.status(500).send("Veri g√ºncellenirken hata olu≈ütu.");
            }
            res.redirect("/projeler");
          });
        })
        .catch(err => {
          res.status(500).send("Resimler y√ºklenirken hata olu≈ütu.");
        });
    } else {
      // Eƒüer yeni resim y√ºklenmemi≈üse direkt g√ºncelle
      projeler[index] = {
        ...projeler[index],
        projeAdi,
        projeSayisi,
        projeAciklamasi,
        baslangicTarihi,
        tamamlanmaOrani: tamamlanmaOrani.replace("%", "")
      };

      fs.writeFile(filePath, JSON.stringify(projeler, null, 4), (err) => {
        if (err) {
          console.error("Dosya yazma hatasƒ±:", err);
          return res.status(500).send("Veri g√ºncellenirken hata olu≈ütu.");
        }
        res.redirect("/projeler");
      });
    }
  });
});
// app.post("/updateProject", upload.array("projeResmi", 10), (req, res) => {
//   const { id, projeAdi, projeSayisi, projeAciklamasi, baslangicTarihi, tamamlanmaOrani } = req.body;
  
//   // Yeni y√ºklenen t√ºm resimlerin yollarƒ±nƒ± al
//   const yeniResimler = req.files.map(file => "/img/" + file.filename); 

//   fs.readFile("./api/data.json", "utf8", (err, data) => {
//     if (err) throw err;
//     let projeler = JSON.parse(data);

//     let index = projeler.findIndex(p => p.id == id);
//     if (index !== -1) {
//       // Mevcut resimleri al, eƒüer varsa
//       let mevcutResimler = projeler[index].projeResmi ? projeler[index].projeResmi.split(',').map(img => img.trim()) : [];
//       // Yeni resimleri mevcut resimlerin sonuna ekle
//       let guncellenmisResimler = [...mevcutResimler, ...yeniResimler].join(', ');

//       // Proje bilgilerini g√ºncelle
//       projeler[index] = {
//         ...projeler[index],
//         projeAdi,
//         projeSayisi,
//         projeAciklamasi,
//         baslangicTarihi,
//         tamamlanmaOrani: tamamlanmaOrani.replace("%", ""),
//         projeResmi: guncellenmisResimler // Yeni ve eski resimleri birle≈ütir
//       };

//       // G√ºncellenmi≈ü projeleri JSON dosyasƒ±na kaydet
//       fs.writeFile("./api/data.json", JSON.stringify(projeler, null, 4), (err) => {
//         if (err) throw err;

//         // G√ºncellenen projeyle birlikte resimleri frontend'e g√∂nder
//         let proje = projeler[index];
//         let resimler = proje.projeResmi.split(',').map(img => img.trim());

//         // EJS ≈üablonuna projeyle birlikte resimleri de g√∂nder
//         res.render('projeler', { proje, resimler });
//       });
//     }
//   });
// });


//Proje Sil 
app.get("/projeSil", (req, res) => {
  const projeId = req.query.id;

  if (!projeId) {
      return res.status(400).send("Proje ID belirtilmedi.");
  }

  // JSON dosyasƒ±nƒ± oku
  fs.readFile("api/data.json", "utf8", (err, data) => {
      if (err) {
          return res.status(500).send("Veri okunamadƒ±.");
      }

      let projeler = JSON.parse(data);
      
      // Projeyi id'ye g√∂re filtreleyerek sil
      projeler = projeler.filter(proje => proje.id !== parseInt(projeId));

      // G√ºncellenmi≈ü JSON'u tekrar dosyaya yaz
      fs.writeFile("api/data.json", JSON.stringify(projeler, null, 4), (err) => {
          if (err) {
              return res.status(500).send("Proje silinirken hata olu≈ütu.");
          }
          res.redirect("/projeler"); // Projeler sayfasƒ±na geri d√∂n
      });
  });
});

//Proje D√ºzenle Page 
app.get("/ayarlar", (req, res) => {
  res.render("ayarlar");
});

//deneme proje g√∂sterme sayfasƒ±
app.get('/goster', (req, res) => {
  const sql = `
      SELECT projeler.*, 
             GROUP_CONCAT(proje_resimler.resim_yolu) AS resimler
      FROM projeler
      LEFT JOIN proje_resimler ON projeler.id = proje_resimler.proje_id
      GROUP BY projeler.id`;

  db.query(sql, (err, results) => {
      if (err) {
          console.error(err);
          return res.status(500).send("Projeler y√ºklenirken hata olu≈ütu.");
      }

      const projeler = results.map(proje => ({
          ...proje,
          resimler: proje.resimler ? proje.resimler.split(",") : []
      }));

      res.render('goster', { projeler });
  });
});

//deneme proje ekleme sayfasƒ± 
app.get("/ekle", (req, res) => {
  res.render("ekle");
});

app.post('/ekle', (req, res) => {
  const { projeAdi, projeSayisi, projeAciklamasi, baslangicTarihi, tamamlanmaOrani } = req.body;
  
  if (!projeAdi || !baslangicTarihi || !tamamlanmaOrani) {
      return res.status(400).send("L√ºtfen gerekli t√ºm alanlarƒ± doldurun.");
  }

  // Yeni proje ekle
  const sql = "INSERT INTO projeler (projeAdi, projeSayisi, projeAciklamasi, baslangicTarihi, tamamlanmaOrani) VALUES (?, ?, ?, ?, ?)";
  db.query(sql, [projeAdi, projeSayisi, projeAciklamasi, baslangicTarihi, tamamlanmaOrani], (err, result) => {
      if (err) {
          console.error(err);
          return res.status(500).send("Proje eklenirken hata olu≈ütu.");
      }

      const projeId = result.insertId;
      console.log("Yeni proje eklendi, ID:", projeId);
      
      // Eƒüer resimler varsa i≈üle
      if (req.files && req.files.resimler) {
          const images = Array.isArray(req.files.resimler) ? req.files.resimler : [req.files.resimler];
          const resimEkleSql = "INSERT INTO proje_resimler (proje_id, resim_yolu) VALUES ?";
          
          const resimVerileri = images.map(file => {
              const ext = path.extname(file.name);
              const yeniDosyaAdi = `${uuidv4()}${ext}`;
              const kayitYolu = path.join(__dirname, "public", "img", yeniDosyaAdi);
              const dbYolu =  yeniDosyaAdi;

              file.mv(kayitYolu, err => {
                  if (err) console.error("Dosya y√ºklenirken hata olu≈ütu:", err);
              });
              
              console.log("Kaydedilen resim:", dbYolu);
              return [projeId, yeniDosyaAdi];
          });

          console.log("SQL'e eklenecek resim verileri:", resimVerileri);
          db.query(resimEkleSql, [resimVerileri], (err) => {
              if (err) {
                  console.error("Resimler eklenirken hata olu≈ütu:", err);
                  return res.status(500).send("Resimler eklenirken hata olu≈ütu.");
              }
              console.log("Resimler ba≈üarƒ±yla SQL'e eklendi.");
              res.redirect('/goster');
          });
      } else {
          res.redirect('/goster');
      }
  });
});


// duzenle sayfasƒ±
app.get('/duzenle/:id', (req, res) => {
  const projeId = req.params.id;

  // Projeyi ve resimlerini √ßekiyoruz
  const sql = `
      SELECT projeler.*, 
             GROUP_CONCAT(proje_resimler.resim_yolu) AS resimler 
      FROM projeler
      LEFT JOIN proje_resimler ON projeler.id = proje_resimler.proje_id
      WHERE projeler.id = ?
      GROUP BY projeler.id
  `;

  db.query(sql, [projeId], (err, results) => {
      if (err) {
          console.error("Proje √ßekme hatasƒ±:", err);
          return res.status(500).send("Veritabanƒ± hatasƒ±");
      }

      if (results.length === 0) {
          return res.status(404).send("Proje bulunamadƒ±.");
      }

      // Resimleri diziye √ßevirelim (virg√ºlle ayrƒ±lmƒ±≈ü olabilir)
      let proje = results[0];
      proje.resimler = proje.resimler ? proje.resimler.split(",") : [];

      // EJS sayfasƒ±na projeyi ve resimleri g√∂nderelim
      res.render('duzenle', { proje });
  });
});

app.post('/duzenle/:id', (req, res) => {
  const projeId = req.params.id;
  const { projeAdi, projeSayisi, projeAciklamasi, baslangicTarihi, tamamlanmaOrani } = req.body;

  // 1Ô∏è‚É£ Proje bilgilerini g√ºncelle
  const sqlProjeGuncelle = `
      UPDATE projeler 
      SET projeAdi = ?, projeSayisi = ?, projeAciklamasi = ?, baslangicTarihi = ?, tamamlanmaOrani = ?
      WHERE id = ?`;
  const paramsProje = [projeAdi, projeSayisi, projeAciklamasi, baslangicTarihi, tamamlanmaOrani, projeId];

  db.query(sqlProjeGuncelle, paramsProje, (err) => {
      if (err) {
          console.error("Proje g√ºncelleme hatasƒ±:", err);
          return res.status(500).send("Veritabanƒ± hatasƒ±");
      }

      // 2Ô∏è‚É£ Eƒüer yeni resimler y√ºklendiyse bunlarƒ± kaydet
      if (req.files && req.files.projeResimler) {
          const projeResimler = req.files.projeResimler;
          const imgPath = path.join(__dirname, "public", "img");

          // Klas√∂r yoksa olu≈ütur
          if (!fs.existsSync(imgPath)) {
              fs.mkdirSync(imgPath, { recursive: true });
          }

          const sqlResimEkle = `INSERT INTO proje_resimler (proje_id, resim_yolu) VALUES ?`;
          const resimValues = [];

          if (Array.isArray(projeResimler)) {
              // Birden fazla dosya y√ºklendiyse
              projeResimler.forEach(file => {
                  const yeniResimAdi = uuidv4() + path.extname(file.name);
                  const tamResimYolu = path.join(imgPath, yeniResimAdi);

                  // Resmi kaydet
                  file.mv(tamResimYolu, (err) => {
                      if (err) {
                          console.error("Resim kaydetme hatasƒ±:", err);
                          return res.status(500).send("Resim kaydedilemedi.");
                      }
                  });

                  resimValues.push([projeId, yeniResimAdi]); // Veritabanƒ±na sadece dosya adƒ±nƒ± kaydet
              });
          } else {
              // Tek bir dosya y√ºklendiyse
              const yeniResimAdi = uuidv4() + path.extname(projeResimler.name);
              const tamResimYolu = path.join(imgPath, yeniResimAdi);

              // Resmi kaydet
              projeResimler.mv(tamResimYolu, (err) => {
                  if (err) {
                      console.error("Resim kaydetme hatasƒ±:", err);
                      return res.status(500).send("Resim kaydedilemedi.");
                  }
              });

              resimValues.push([projeId, yeniResimAdi]);
          }

          // Resim bilgilerini veritabanƒ±na ekle
          db.query(sqlResimEkle, [resimValues], (err) => {
              if (err) {
                  console.error("Resim ekleme hatasƒ±:", err);
                  return res.status(500).send("Resim ekleme ba≈üarƒ±sƒ±z oldu.");
              }
              res.redirect('/goster');
          });
      } else {
          res.redirect('/goster');
      }
  });
});

// app.post('/duzenle/:id', upload.array('projeResimler', 10), (req, res) => {
//   const projeId = req.params.id;
//   const { projeAdi, projeSayisi, projeAciklamasi, baslangicTarihi, tamamlanmaOrani } = req.body;

//   // 1Ô∏è‚É£ √ñnce proje bilgilerini g√ºncelle
//   const sqlProjeGuncelle = `
//       UPDATE projeler 
//       SET projeAdi = ?, projeSayisi = ?, projeAciklamasi = ?, baslangicTarihi = ?, tamamlanmaOrani = ?
//       WHERE id = ?`;
//   const paramsProje = [projeAdi, projeSayisi, projeAciklamasi, baslangicTarihi, tamamlanmaOrani, projeId];

//   db.query(sqlProjeGuncelle, paramsProje, (err) => {
//       if (err) {
//           console.error("Proje g√ºncelleme hatasƒ±:", err);
//           return res.status(500).send("Veritabanƒ± hatasƒ±");
//       }

//       // 2Ô∏è‚É£ Eƒüer yeni resimler y√ºklendiyse bunlarƒ± kaydet
//       if (req.files && req.files.length > 0) {
//           const sqlResimEkle = `
//               INSERT INTO proje_resimler (proje_id, resim_yolu)
//               VALUES ?`;

//           const resimValues = req.files.map(file => [projeId, file.filename]);

//           db.query(sqlResimEkle, [resimValues], (err) => {
//               if (err) {
//                   console.error("Resim ekleme hatasƒ±:", err);
//                   return res.status(500).send("Resim ekleme ba≈üarƒ±sƒ±z oldu.");
//               }
//               res.redirect('/goster');
//           });
//       } else {
//           res.redirect('/goster');
//       }
//   });
// });

// deneme sil sayfasƒ±
// Projeyi silme
app.get('/sil/:id', (req, res) => {
  const projeId = req.params.id;

  // 1Ô∏è‚É£ √ñnce ilgili resimlerin yolunu al
  const getImagesQuery = 'SELECT resim_yolu FROM proje_resimler WHERE proje_id = ?';

  db.query(getImagesQuery, [projeId], (err, results) => {
      if (err) {
          console.error("Resimleri alma hatasƒ±:", err);
          return res.status(500).send("Resimleri alƒ±rken hata olu≈ütu.");
      }

      // 2Ô∏è‚É£ Resim dosyalarƒ±nƒ± 'public/img/' klas√∂r√ºnden sil
      results.forEach(row => {
          const resimYolu = path.join(__dirname, "public", "img", row.resim_yolu);
          if (fs.existsSync(resimYolu)) {
              fs.unlink(resimYolu, (err) => {
                  if (err) console.error("Dosya silme hatasƒ±:", err);
              });
          }
      });

      // 3Ô∏è‚É£ √ñnce proje_resimler tablosundaki ilgili kayƒ±tlarƒ± sil
      const deleteImagesQuery = 'DELETE FROM proje_resimler WHERE proje_id = ?';

      db.query(deleteImagesQuery, [projeId], (err) => {
          if (err) {
              console.error("Resim tablosu silme hatasƒ±:", err);
              return res.status(500).send("Resim kayƒ±tlarƒ± silinemedi.");
          }

          // 4Ô∏è‚É£ Ardƒ±ndan projeler tablosundan projeyi sil
          const deleteProjectQuery = 'DELETE FROM projeler WHERE id = ?';

          db.query(deleteProjectQuery, [projeId], (err) => {
              if (err) {
                  console.error("Proje silme hatasƒ±:", err);
                  return res.status(500).send("Proje silinemedi.");
              }
              res.redirect('/goster'); // Silme i≈üleminden sonra y√∂nlendirme
          });
      });
  });
});

app.delete('/resim-sil/:resimYolu', (req, res) => {
  const resimYolu = req.params.resimYolu;
  const projeId = req.body.projeId; // Eƒüer gerekirse projeId de alabilirsin

  // 1Ô∏è‚É£ Dosya yolunu belirle
  const dosyaTamYolu = path.join(__dirname, "public", "img", resimYolu);

  // 2Ô∏è‚É£ Dosyayƒ± img klas√∂r√ºnden sil
  if (fs.existsSync(dosyaTamYolu)) {
      fs.unlink(dosyaTamYolu, (err) => {
          if (err) {
              console.error("Dosya silme hatasƒ±:", err);
              return res.status(500).json({ success: false, message: "Dosya silinemedi." });
          }

          // 3Ô∏è‚É£ Veritabanƒ±ndan ilgili kaydƒ± sil
          const sqlSil = "DELETE FROM proje_resimler WHERE resim_yolu = ?";
          db.query(sqlSil, [resimYolu], (err, result) => {
              if (err) {
                  console.error("Veritabanƒ± silme hatasƒ±:", err);
                  return res.status(500).json({ success: false, message: "Veritabanƒ±ndan silinemedi." });
              }
              res.json({ success: true });
          });
      });
  } else {
      res.status(404).json({ success: false, message: "Dosya bulunamadƒ±." });
  }
});

// Sunucuyu Ba≈ülat
app.listen(3000, () => {
    console.log(`Sunucu http://localhost:${PORT} adresinde √ßalƒ±≈üƒ±yor.`);
});
